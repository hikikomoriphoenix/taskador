/*
 *    Copyright 2018 Loremar Marabillas
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "marabillas.loremar.taskador"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            // Get signing config values from outside the project directory. This avoids any
            // chance of publishing the key password to the Github repository.
            //
            // taskador.signing is saved in gradle.properties and holds the path to the file
            // containing signing config values.
            if (project.hasProperty("taskador.signing")
                    && new File(project.property("taskador.signing").toString()).exists()) {
                Properties props = new Properties()
                def propFile = new File(project.property("taskador.signing").toString())
                if (propFile.canRead()) {
                    props.load(new FileInputStream(propFile))
                    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
                        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
                    } else {
                        println 'androidproject.properties found but some entries are missing'
                        android.buildTypes.release.signingConfig = null
                    }
                } else {
                    println 'androidproject.properties file not found'
                    android.buildTypes.release.signingConfig = null
                }
            }
        }
        buildTypes.each {
            it.buildConfigField 'String', "backend_url", taskador_back_end_address
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.11.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha2'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-dynamic-animation:27.1.1'
}
